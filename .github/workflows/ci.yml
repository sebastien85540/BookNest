name: Laravel CI/CD

on:
  push:
    branches:
      - dev  # Déclenchement lors d'un push sur la branche dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Cloner le repo
        uses: actions/checkout@v4

      - name: 🔨 Construire les conteneurs
        run: docker compose up -d --build

      - name: 🚀 Vérifier que MySQL est prêt
        run: |
          sleep 10
          docker compose exec -T db mysqladmin ping -h db -uroot -proot

      - name: 📦 Installer les dépendances Composer
        run: docker compose exec -T app composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: 🔄 Lancer les migrations
        run: docker compose exec -T app php artisan migrate --force

      - name: ✅ Lancer les tests Laravel
        run: docker compose exec -T app php artisan test

  deploy:
    needs: build-and-test
    if: success()  # Si la CI réussie, on lance le déploiement
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: 📥 Cloner le repo
        uses: actions/checkout@v4

      - name: 🚀 Configurer Git pour les actions
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: 🚀 Récupérer toutes les branches et changer vers `main`
        run: |
          git fetch --all  # Récupérer toutes les branches du repo
          git checkout main || git checkout -b main  # Si la branche `main` n'existe pas, la créer

      - name: 🚀 Fusionner `dev` dans `main`
        run: |
          git merge dev --no-ff --allow-unrelated-histories --strategy=recursive -X theirs # Fusionner dev dans main
          git push origin main  # Push de la branche main mise à jour

      - name: 🛠️ Préparer SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.IP_SSH }} >> ~/.ssh/known_hosts
          ssh -v -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.USER_SSH }}@${{ secrets.IP_SSH }} "echo 'Connexion réussie !'"


      - name: 🛠 Tester la connexion SSH avec logs
        run: |
          ssh -v -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.USER_SSH }}@${{ secrets.IP_SSH }} "echo 'Connexion réussie !'"

      - name: 📤 Déploiement sur le serveur
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.USER_SSH }}@${{ secrets.IP_SSH }} "cd /var/www/html/BookNest && git pull origin main && docker compose up -d --build"

env:
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # Utiliser le token pour l'authentification GitHub
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  USER_SSH: ${{ secrets.USER_SSH }}
  IP_SSH: ${{ secrets.IP_SSH }}

