name: Laravel CI/CD

on:
  push:
    branches:
      - dev  # DÃ©clenchement lors d'un push sur la branche dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: ğŸ“¥ Cloner le repo
        uses: actions/checkout@v4

      - name: ğŸ”¨ Construire les conteneurs
        run: docker compose up -d --build

      - name: ğŸš€ VÃ©rifier que MySQL est prÃªt
        run: |
          sleep 10
          docker compose exec -T db mysqladmin ping -h db -uroot -proot

      - name: ğŸ“¦ Installer les dÃ©pendances Composer
        run: docker compose exec -T app composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: ğŸ”„ Lancer les migrations
        run: docker compose exec -T app php artisan migrate --force

      - name: âœ… Lancer les tests Laravel
        run: docker compose exec -T app php artisan test

  deploy:
    needs: build-and-test
    if: success()  # Si la CI rÃ©ussie, on lance le dÃ©ploiement
    runs-on: ubuntu-latest

    steps:
      - name: ğŸ“¥ Cloner le repo
        uses: actions/checkout@v4

      - name: ğŸš€ RÃ©cupÃ©rer toutes les branches et changer vers `main`
        run: |
          git fetch --all  # RÃ©cupÃ©rer toutes les branches du repo
          git checkout main || git checkout -b main  # Si la branche `main` n'existe pas, la crÃ©er

      - name: ğŸš€ Fusionner `dev` dans `main`
        run: |
          git merge --ff-only origin/dev  # Fusionner dev dans main
          git push origin main  # Push de la branche main mise Ã  jour

          #      - name: ğŸ“¤ DÃ©ploiement sur le serveur
        #        run: |
#          ssh user@your-server "cd /path/to/laravel && git pull origin main && docker compose up -d --build"
          
env:
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # Utiliser le token pour l'authentification GitHub

